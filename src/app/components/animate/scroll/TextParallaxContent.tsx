'use client';
// import { TextParallaxContentExample } from '@/app/components/animate/scroll/TextParallaxContent';
import Heading from '@/app/components/design/Heading';
import React, { useState, useRef } from 'react';
import { HistoryMonasteryData } from '@/lib/historyMonasteryData';
import { ClipLoader } from 'react-spinners';
import Container from '@/app/components/Container/container';
import history from '@/assets/image/history.jpg';
import Image from 'next/image';
import { motion, useScroll, useTransform } from 'framer-motion';
import { TextParallaxContentProps, OverlayCopyProps } from '@/types/types';

const History = () => {
  const [refreshKey] = useState(0); // State ƒë·ªÉ l√†m m·ªõi d·ªØ li·ªáu

  const {
    queueData: data,
    isLoading,
    isError,
  } = HistoryMonasteryData(refreshKey);
  console.log('üöÄ ~ History ~ data:', data);

  if (isLoading)
    return (
      <div className="text-center">
        <ClipLoader size="20" loading={isLoading} />
      </div>
    );
  if (isError || !data) return <div>Error loading queue data.</div>;
  return (
    <div>
      <Container>
        <Heading name="Gi·ªõi Thi·ªáu V·ªÅ H·ªôi D√≤ng" />
        <div className="flex items-center justify-between my-10">
          {/* N·ªôi dung b√™n tr√°i */}
          <div className="text-left w-1/2 pr-8">
            <div className="text-18 italic text-black">
              <b className="text-24">&#34;</b> V·ªõi ni·ªÅm tin v√† l√≤ng ki√™n tr√¨,
              ch√∫ng ta c√πng nhau x√¢y d·ª±ng m·ªôt c·ªông ƒë·ªìng v·ªØng m·∫°nh, lan t·ªèa gi√°
              tr·ªã t·ªët ƒë·∫πp v√† g·∫Øn k·∫øt nh·ªØng t√¢m h·ªìn trong m·ªôt h√†nh tr√¨nh chung
              ƒë·∫ßy √Ω nghƒ©a. <b className="text-24"> &#34;</b>
            </div>
          </div>

          {/* H√¨nh ·∫£nh b√™n ph·∫£i */}
          <div className="relative w-1/2 h-64">
            <Image
              src={history}
              alt="banner"
              layout="fill"
              objectFit="cover"
              className="rounded-lg"
            />
          </div>
        </div>

        <p
          className="content"
          dangerouslySetInnerHTML={{
            __html: data.about.replace(/\"/g, ''), // X√≥a t·∫•t c·∫£ d·∫•u "
          }}
        />
      </Container>
    </div>
  );
};

export const HistoryContent = () => {
  return (
    <div className="">
      <TextParallaxContent
        subheading="V·ªÅ Ch√∫ng T√¥iT√¥i"
        heading="ƒê√¥i N√©t V·ªÅ H·ªôi D√≤ng Anh Em ƒê·ª©c Maria"
      >
        <History />
      </TextParallaxContent>
    </div>
  );
};

const IMG_PADDING = 12;

const TextParallaxContent: React.FC<TextParallaxContentProps> = ({
  subheading,
  heading,
  children,
}) => {
  return (
    <div style={{ paddingLeft: IMG_PADDING, paddingRight: IMG_PADDING }}>
      <div className="relative h-[150vh]">
        <StickyImage />
        <OverlayCopy heading={heading} subheading={subheading} />
      </div>
      {/* ƒê·∫£m b·∫£o children ƒë∆∞·ª£c render ·ªü ƒë√¢y */}
      <div className="mt-8">{children}</div>
    </div>
  );
};

const StickyImage: React.FC = () => {
  const targetRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: targetRef,
    offset: ['end end', 'end start'],
  });

  const scale = useTransform(scrollYProgress, [0, 1], [1, 0.85]);
  const opacity = useTransform(scrollYProgress, [0, 1], [1, 0]);

  return (
    <motion.div
      ref={targetRef}
      style={{
        scale,
      }}
      className="sticky z-0 overflow-hidden rounded-3xl relative w-full h-full" // ƒê·∫£m b·∫£o c√≥ "relative" v√† k√≠ch th∆∞·ªõc
    >
      <Image src={history} alt="Sticky image" fill className="object-cover" />
      <motion.div
        className="absolute inset-0 bg-neutral-950/70"
        style={{
          opacity,
        }}
      />
    </motion.div>
  );
};

const OverlayCopy: React.FC<OverlayCopyProps> = ({ subheading, heading }) => {
  const targetRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: targetRef,
    offset: ['start end', 'end start'],
  });

  const y = useTransform(scrollYProgress, [0, 1], [250, -250]);
  const opacity = useTransform(scrollYProgress, [0.25, 0.5, 0.75], [0, 1, 0]);

  return (
    <motion.div
      style={{
        y,
        opacity,
      }}
      ref={targetRef}
      className="absolute left-0 top-0 flex h-screen w-full flex-col items-center justify-center text-white"
    >
      <p className="mb-2 text-center text-xl md:mb-4 md:text-3xl">
        {subheading}
      </p>
      <p className="text-center text-4xl font-bold md:text-7xl">{heading}</p>
    </motion.div>
  );
};

export default function Title({ name }: { name: string }) {
  return (
    <h1 className="col-span-1 text-3xl font-bold md:col-span-4">{name}</h1>
  );
}
